/*
 *   연산자/피연산자
 *   
 *   피연산자 1개(단항연산자)
 *          2개(이항연산자)
 *          3개(삼항연산자)
 *          
 *   단항연산자
 *    = 증감 연산자(++, --)
 *      int a=10;
 *      ++a; => a=11
 *      
 *    = 부정 연산자(boolean)
 *      boolean b=false;
 *      b =!b; ==> true
 *      
 *    = 형변환 연산자((int)'A')
 *      UpCasting => 작은 데이터형에서 높은 데이터형으로 ex) (int)'A' => char을 int로
 *      자동 형변환 => int a='A'
 *      
 *      DownCasting => 큰 데이터형을 작은 데이터형으로 ex) (int)10.5
 *      
 *    = 기타 (~: 반전연산자), ., []
 *    
 *   이항연산자
 *    = 산술연산자(+, -, *, /, %)
 *      +: 산술 연산, 문자열 결합
 *         5 + 6 = 11
 *         "5" + 6 = "56"
 *         5 + "7" + 6 = "576"
 *         "7" + 7 + 7 = "777"
 *         7 + 7 + "7" = "147"
 *         
 *         데이터형 자동 변경
 *         -------------
 *         int + double => double  ex) 10 + 10.5 => 10.0 + 10.5
 *                                     'a' + 10 => 97 + 10
 *         단, int보다 낮은 데이터의 경우 int ex) byte + byte = int
 *                                          char + char = int
 *      
 *      /
 *      1) 정수/정수 = 정수
 *         10/3 ==> 3
 *         5/2 ==> 2
 *      2) 0으로 나눌 경우 오류 발생
 *         ==> 단위테스트(Junit) 
 *         
 *      %: 나눈 나머지
 *         10 % 3 ==> 1
 *         9 % 4 ==> 1
 *         10 % 2 ==> 0
 *         
 *         ==> 부호(앞의 숫자 부호에 따라 부호 결정)
 *         5 % 2 == 1
 *         -5 % 2 == -1
 *         5 % -2 == 1
 *         -5 % -2 == -1
 *                                          
 *    = 쉬프트연산자(<<, >>)
 *      10<<2 ==> 40(10 * 2^2)
 *      11<<3 ==> 88(11 * 2^3)
 *      
 *      10>>2 ==> 2(10 / 2^2)
 *      11>>3 ==> 1(11 / 2^3)
 *    
 *    = 비트연산자(&, |, ^)
 *      &(*)  |(+)  ^(다른 비트)
 *      
 *      ----------------------
 *          &(*)  |(+)    ^(XOR)
 *      ----------------------
 *      0 0  0     0       0
 *      ----------------------
 *      0 1  0     1       1
 *      ----------------------
 *      1 0  0     1       1
 *      ------------------------
 *      1 1  1     1       0
 *      ------------------------
 *      10 & 14 ==> 1010 * 1110 ==> 1010 따라서 10
 *      21 & 6 ==> 10101 * 110 ==> 00100 따라서 4
 *      10 | 14 ==>                1110 따라서 14
 *      21 | 6 ==>                 10111 따라서 23
 *      10 ^ 14 ==>                0100  따라서 4
 *      21 ^ 6 ==>                 10011 따라서 19
 *      
 *    = 비교연산자(==, !=, <, >, <=, >=)
 *      결과값: boolean(true/false)
 *      6 == 7 ==> false
 *      6 != 7 ==> true
 *      6 < 7 ==> true
 *      6 < 7 ==> false
 *           .
 *           .
 *           .     
 *      => 정수/실수/문자/논리(O) but 문자열 계산 불가
 *                                 |
 *                        equals(), compare()
 *                        
 *    = 논리연산자(&&, ||)
 *      &&: 직렬연산자
 *      ||: 병렬연산자
 *      
 *      (조건) && (조건)
 *      
 *      ------------------------------
 *                       &&       ||
 *      ------------------------------
 *      true  true      true     true
 *      ------------------------------
 *      true  false    false     true
 *      ------------------------------
 *      false true     false     true
 *      ------------------------------
 *      false false    false    false
 *      ------------------------------
 *      score >= 90 && score <= 100  => 90~100값은 true
 *       
 *    = 대입연산자(=, +=, -=, *=, /=, %=...)
 *      int a=10; => 10을 a에 대입
 *      int a=10;
 *      a += 10 => a + 10을 a에 대입
 *      
 *      int a=10;
 *      a++; => 현재 a값을 출력한 후 1증가
 *      ++a; +> 현재 a값에 1증가한 후 출력
 *      
 */
public class 자바연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(Integer.toBinaryString(898&6));
		

	}

}
